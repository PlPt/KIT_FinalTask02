package edu.kit.informatik.junit.suite;

import org.junit.jupiter.api.*;
import static edu.kit.informatik.junit.TestHelper.*;
import edu.kit.informatik.Terminal;
import edu.kit.informatik.junit.Wrapper;

/**
 * This one tests the reset command.
 * @author Dominik Bez
 *
 */
public class Test005Reset {

    /**
    *
    * Here you have to set which parameters you want to use for your test
    */
   public static String[] testArgs = {"standard", "20", "3"};
   
   /**
    * Executes before ALL tests
    */
   @BeforeAll
   public static void enableTerminalTestingMode() {
       Terminal.enableTestingMode();
   }
   
   /**
    * Executes before EVERY test
    */
   @BeforeEach
   public void reset() {
       Terminal.reset();

   }
   
   /**
    * Executes after EVERY test. All @After methods are guaranteed to run even if a Before or Test method 
    * throws an exception. The @After methods declared in superclasses will be run after those of the current class.
    */
   @AfterEach
   public void runTests() {
       
       // Run and terminate
       Terminal.addNoOutput("quit");
       Wrapper.main(testArgs);
       
       // Tell the Terminal to check the outputs and to cleanup
       Terminal.flush();
       Terminal.reset();
   }
   
   /**
    * This is the actual test. It is possible to add more test methods.
    */
   @Test
   public void invalidReset() {
       expectError("Reset");
       expectError(" reset");
       expectError("reset ");
       expectError("resetb");
       expectError("reset 0");
       expectError("reset 1;2");
       expectError("reset ;");
       expectError("reset ;;");
       expectError("RESET");
       expectError("resEt");
       expectError("reset4");
       expectError("-reset");
       expectError("reset-");
       expectError("reset\n");
       expectError("\nreset");
       expectError("\treset");
       expectError("reset\t");
       expectError("reset quit");
       expectError("resetquit");
       expectError("resetreset");
       expectError("reset reset");
       expectError(" reset ");
       expectError("re set");
   }
   
   /**
    * Tests for a valid reset
    */
   @Test
   public void validReset() {
       expectOK("place 7;3;8;5");
       expectOK("place 8;15;13;17");
       expectOK("place 0;0;17;17");
       expectOK("place 19;2;1;12");
       Terminal.addSingleLineOutputThatIsExactly("print", "P3 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** P1 ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** P1 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** P1 ** ** ** ** ** ** ** ** ** P2 ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** P2 ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** P3 ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** P1 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       expectOK("reset");
       Terminal.addSingleLineOutputThatIsExactly("print", "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       Terminal.addSingleLineOutputThatIsExactly("rowprint 8", "** ** ** ** ** ** ** ** ** ** "
               + "** ** ** ** ** ** ** ** ** **");
       Terminal.addSingleLineOutputThatIsExactly("colprint 17", "** ** ** ** ** ** ** ** ** ** "
               + "** ** ** ** ** ** ** ** ** **");
       
       //same as above
       expectOK("place 7;3;8;5");
       expectOK("place 8;15;13;17");
       expectOK("place 0;0;17;17");
       expectOK("place 19;2;1;12");
       Terminal.addSingleLineOutputThatIsExactly("print", "P3 ** ** ** ** ** ** ** ** ** ** ** "
               + "** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** P1 ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** P1 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** P1 ** ** ** ** ** ** ** ** ** P2 ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** P2 ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** P3 ** **\n"
               + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
               + "** ** P1 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       expectOK("reset");
       Terminal.addSingleLineOutputThatIsExactly("print", "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       Terminal.addSingleLineOutputThatIsExactly("rowprint 8", "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       Terminal.addSingleLineOutputThatIsExactly("colprint 17", "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
   }
   
   @Test
   public void completeGameReset() {
       expectOK("place 7;4;8;5");
       expectOK("place 6;3;9;6");
       expectOK("place 8;6;8;7");
       expectOK("place 7;6;6;7");
       expectOK("place 9;4;5;8");
       expectOK("place 8;8;8;9");
       expectOK("place 8;10;7;5");
       expectOK("place 9;5;9;7");
       expectOK("place 7;3;7;7");
       expectOK("place 5;5;6;5");
       Terminal.addSingleLineOutputThatIsExactly("place 9;8;9;9", "P2 wins");
       Terminal.addSingleLineOutputThatIsExactly("print", "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** P1 ** ** P2 ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** P2 ** P1 ** P1 ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** P3 P1 P1 P1 P3 ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** P1 P3 P3 P3 P3 P1 ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** P2 P2 P2 P2 P2 P2 ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       
       expectOK("reset");
       Terminal.addSingleLineOutputThatIsExactly("print", "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **\n"
                                                        + "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       Terminal.addSingleLineOutputThatIsExactly("rowprint 7", "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       Terminal.addSingleLineOutputThatIsExactly("colprint 5", "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **");
       
       expectOK("place 7;9;3;14");
       Terminal.addSingleLineOutputThatIsExactly("state 3;14", "P1");
       Terminal.addSingleLineOutputThatIsExactly("state 7;9", "P1");
       
       expectOK("reset");
       Terminal.addSingleLineOutputThatIsExactly("state 3;14", "**");
       Terminal.addSingleLineOutputThatIsExactly("state 7;9", "**");
   }
    
}
